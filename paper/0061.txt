NBER WORKING PAPER SERIES

FACIORING 12 BLOCK-ANGULAR BASES

%hn. Orchard_Hays*

Working Paper No. 61

COMP1JR RESEARCH CENTER FOR ECONOMICS AND MANAGEMENT SCIENCE

National Bureau of Econanic Research, Inc.
575 Technology Square
Cambridge, Massachusetts 02139

November 19Th.

Preliminary: not for quotation

NBER rking papers

are

distributed informally and

in

limited

for comments only. They should not be quoted without
written permission.
numbers

This report has not undergone the review accorded official NBER

publications; in particular, it has not yet been submitted for

approval by the Board of Directors.

*NBER Computer Research Center. Research supported in part by
National Science Foundation Grant GJ-1154X3 to the National
Bureau of Economic Research, Inc.

.
Abstract

A factorization of the basis for any block-angular 12 nDdel is presented,

and its inverse is shown to be readily irintainable as piecemeal productforms plus possible additional columns. Straightforward rules for piecemeal transforirat ion of full rows and columns are given.

S

Contents

Environment

.

1

2. A General Basis

.

2

•

3

.

6

5. Rc Updates with the Factored Inverse .

9

1.

3.

Factoring of D and

4.

Recombining Second Order Factors

.

.

6.

Effect of Change in D;1 on E

11

7.

cross-Block Exchanges

l4

8.

Summary of Basis-Change Cases

15

9. A Skeletal Decomposition Algorithm

16

References

24

1. Environment

The foim of a general block-angular LP nodel for decomposition algorithms

is as follows:
P
AX+ZAX=b.
pp

pl

where the A and B are matrices of row-order m0 and m
(pO ,1,. . ,P
.

for

p=l,. .

. ,P

for B) X are np_order

columns matching the coltmn orders of the A (and B for
p
A0

0), and b are rn-order columns of

>

constants.

and each B are assumed to contain full nip-order identity matrices

with corresponding logical (slack) variables in the X columis. Except

as explicitly noted, it is unnecessary to distinguish logical and
structural variables in the present discussion. One fr logical in
=

{X, X2,..., X0 I

is to be maximized. For simplicity, we will take this to be X when
necessary
When

to distinguish it, i.e •,

necessary

the

functional is the top row.

to be precise, the ui_order identity matrix will be

denoted by I, but usually I will stand for the identity of whatever order

identity.
In the present discussion, the total model is of only minor interest,

is required. Occasssionally 'k is used to dentoe the k-order

the basis for some solution to such a model being the focus of attention.

Hence the same letters as above will be used for substructures of a basis,
with no additional notation since additional marks will be required for

other purposes. Thus, in the sequel, A0 and B stand for square, nonsingular
matrices unless modified by "the full".

—2—

2. A General Basis

Almost the entire difficulty in partitioning a block-angular model for

computation is due to the fact that a general basis has a more Oclicated
structure than the entire model. The most generel structure required for

a basis is as follows:

oo T
ol

...TJA...A...A
1
P
p

(A

0±-'

T1 ...

(0

0)

(0

0..Tpp...O)

(0

0

UT)
PP

B1

=

B

p

•B

P

S
T are
A00is k columns
from the full A0, op
0
k columns from the full A with T the corresponding

where

columns from the full B

The columns of A00 and of each T0 are all linearly independent so that
the matrix

(A00Tol ...

T

oP

is nonsingular. Obviously then
P

k
p
p=o

m

a

—3-.

3. Factoring of D arid
Let

A

10

B=

B1

p

B
The matrix B is readily factored into P matrices of the form

1g... Ar... 0
I
•B

p
..

I

which are completely corrmutative arid have inverses of the same form. Hence

the inverse of B can be computed piecemeal and the pieces multiplied together

in any order. Since P2 encompases all possible cases, that is, any results
can be

applied recursively, we illustrate the above statements for P2, which

in fact constitutes a proof.

II Ai
B1

[

I

[

-A B1.

B1

I

.

L

A2

-1 [

I

-A
I

B2

[

B

I

IA

A2

I

B1

ij

B2

[i
=

F Al

A2 1

I

[

[

B2j

B

I

1

Al

A2

=

'j

1

A2

Then substituting A for A in the above shows that the
pp
p
inverses corimute and nniLtiply together in exactly the same way. Hence

Let -A B1 = A

p

p

handling of B and B1 poses no problem at all. Note that B is
computed autanaticafly by the product form of inverse. In fact, the above

factorization is merely a generalization of a special case of the product
form of inverse. This gave rise to the name "block-product form of inverse"
[LIP]

in an ealier decomposition algorithm.

We must now seek a matrix E such that

experimentation

complications

either EBD

or BED. A little

should convice the reader that the form

than

EB leads

to riore

it resolves. Hence, we adopt the form BE=D.

Let E be partitioned exactly as D with blocks denoted

by Epq. Let

Q forp>0

E

op

Epp =1p forp>0

Epq =0

Epa=B(0..T
...0)=(0...Tpp ...0)
p
pp
(Aoool
T .. .T

E

00

)

-

P

(A00 Tol. . .TOP ) +

(0.. .T

1

.

pp

p::1 pp
P

=

A B1

forp>0

A (0.. .Tpp

. .0)

..0)

p

P

=(A00T ol
...ToP)—

A (0... ...0)
p=l

p

pp

.

—5—

Note that

the second tern in E0 can be computed

in

either of

t .ys, which-

ever is itore convenient.

Again i1ustrating with P2, it is apparent that the above definitions
of E satisfy the equation BE-D.

I

((A00 T01 T2) - (0

A
a1

(0T110)

(0022)

B2

(A

00

Tol T)02 A..j

T11 0)

(0

(0 0
—1

Therefore D

= E—1 B—1 .

B1

T22)

Since

B2

E is of the fonn

E

00

E10

i

20
its inverse is of the form

-E
E' I
10 oo
—E
20 E1
00

A2

I

0)

-A2 (0 0 T22))

—6—

The difficulty is thus reduced to ccznputing E . Although this looks
somewhat formidable, further simplications are possible.
4. Recathining Second Order Factors

Consider a single factor of B1 in the form

10 Ai
[oBjJ

=

D

with all T—columns replaced with unit vectors, the positions
in all lower blocks being zero, i.e.

and an

00

(A00 'm - k

the full

{Al,

unit vector.

The

Suppose some column T1 from

replace

St

the (k0+l) -

B1} is to be irrtroduced to

.

column T must first be

transformed by D1, as follows:

D' Tl =

The result is
and

E10

Let

.

1 All rTi

[ol

L BJLT1±[

L

+

A1 Til

B1T

=

[To1

L

A1

Tl

exactly the two subcolumns which should go into the new Eoo

The new E can be computed in product form, as follows:

T

ol

T1 - A1

-T
=E-l
00
01
the eta column formed from o by

k-Fl
pivoting on (Y.

nil
FC

oi

the extension to n1 using T11
the elementary column matrix containing
r

ol

in column k +1

0

S

—7—

Then

((F() A) 1 'm0-k-l = OO

=

(Note:

nO1

The notation A is imprecise since A00 is riot

is meant is the
columns are

square.

corresponding to A00. The remaining unit

part of E

unchanged.)

-E10 E - (0.. T11...)

Now

E which is Inerely*

.

row k0+l of

repeated m,1 times scaled by the elements

Call this highly

singular matrix

subsequent

What

(E)10. To see its effect in

transformations, suppose some

general column

S={S0,S1,S2}

is to be transformed into terms of the new basis or, nore briefly,
"updated".

First

D1S

Note that

=

IAA
12

s+A..s
o
1-l 1

S

o

l

B1
i

S

2

B1S1
B1S2

s2

is simply the upper parts of the updates by D' and

added to S0. Next,

0

00

(E)
0

I

0

00

(E)10
12

s2

S2

Such a product of a column on the left multiplied by a row on
often called an outer product, as it is in the sequel.

is

the right

—8—

is

merely another update to

(E)10

and

=

S2

But what of the term

It is merely

-

k+l
S°

(sclar times m1-order column)

Hence the computation and
unnecessary.

recording of either Ti11 or (E)10 is

Only T11 need be kept. Furthermore, since it applies only

to the p=l seg'nent, it can be kept with the pl block. If there were
severul such columns, they would all be additive (subtractive) with

multipliers from

.

If (E)20 were not void, it would apply in the

same way to

This appears to be about as complete a factorization if

as is

possible. Note that all inverse factors except the
can be carried
in product form in the usual manner, in fact this is advantageous for
is only a
computing the terms A S. And even the application of the
slight variation on usual product-form updating.

Note also that if a new T1 replaces the original T1, the upper part
can be incorporated in the product form of

replaces T11. It must
the

be understood,

and the lower part simply

however, that

if any B1

changes,

rm.ist be updated, which is another reason for carrying them with

block p. Moreover, there is an effect on E which is rather more
complicated.

This

will be

taken up in Section 6.

.

—9—

5.

Row Updates with the Factored Inverse
Suppose a general row R CR0 ,R1,. ..

,R,)

must be transformed. In

point of fact, the simplex method and most of its variations almost never

update a general row, except the Phase 1 feasibility form. In a decanposition model, feasible solutions to the subproblems must be found independently

anyway, so that even a feasibility form would be nonzero only in R0. In
dual pricing, the denominator form would be nonzero in some block

and

zero elsewhere. However, we may as well look at the general case since the

special cases will be apparent.
In order to compute PD, we first compute

E1
= CR

o ,R,1,R2 )

(E)10 I
(E)20

((RQE ÷ R1(E'

12

+ R2 (E)20), R1, R2)

10

Since R1 and R2 are unchanged we can concentrate on R0. The first term is

merely the usual backward transformation if E is kept in product form.
If R1=R2=0, as would often be the case, that is the end of it, but suppose

not. However, even then, there is a further effect only when both R and

(E) are
is their
0 nonzero. Suppose R1 and (E),0 are both nonzero; whatk+l
° or,
product? Recall that (E)10 is the outer product of
and
(E0)
rrore generally,

the r-th row of

products for r1

,r2,... For each

R1

,

or

the sun

of

several such outer

such r, let

T, an inner product

over m1

elements

- 10 —

Then

r

R1(E1)10 = r
where

r is the

This

is

r-th row of E

to the r-th element of

readily computed by adding each

before computing
R0
Let

00

be the product so computed. Then we must compute

=

(,R1R2) B'

For p1, this gives
+

=

(0,R1,R2)

B'
I

and

this applied to block p2 gives

A2

' ok + R1B1) ,R2)

=

Note that

I

'Ai

+

R1B1)

' oA2 + R2B))

(RQ,R1.R2)
and that

p >

0, are

of the same form, merely the

usual backward transforrr.tion for (Re, R) post-multiplied by

- 11

Thus

the

—

can be computed piecemeal provided all the

are

accessible first to compute R0.

6. Effect of Change in D on E
It has thus far been shown that both row and co1imin updates are

readily performed with the factored inverse and that changes in

are easily accounted for. However, a change in a D1is not as snp1e

when T exist. First of all, the

must be updated, as previously

noted, but this is not different from one eta-update on any set of 1n_order
columns. We must now investigate the effect on E.

Consider again the situation arrived at with E in Section L, and
suppose the next change of basis occurs in D1, i.e. in {A1 ,B.. Insofar

as D1 is concerned, this is handled in normal fashion with an additional

eta-column. But E and E were computed on the basis of the original D1

and are no longer valid. Drop the hats on Eand E and consider them

the current 00
E and E00.

We

now have D
1 arid D
1 . Let

T-AT.
ol i
T11

Then the

(k0+l)-st column

of

T

ol

T11

E has changed from

to T01 and

must be

accounted for in E. This is done as usual by computing

arid

for

czE—l
oo
k+l
0

-'

T

ol

to form
.
E to give (a new)

pivoting

on ct

from block pl if several are

a new

which

is

added to the product form

Furthermore, this must be done for all T-columns

in effect.

- 12 —
°
The question arises as to whether a

might

not vanish so that

pivoting

is not possible. We glossed over this question in the first place but presumably

the

column T1 was selected to pivot in position k0+l becasue. that a-element

was nonzero. The change in {A1 ,B1 }, however, was determined on the basis of

some updated element from the full B1 being nonzero and has no obvious implication

for T1 and a. One answer is that since, in a global sense, we are simply
nuiltiplying nonsingular matrices to form a nonsingular product, no factor
can become singular, but this argument is incomplete and vague.
Let S be the column from the full {A1 ,B1 } which replaced the r-th

m) of D1 to give D1. To make this selection, the column S
had to be updated and made into an a-column. Let us carry out this
column

Cr >

calculation, again with P 2.

I A1 A2

S0 + A1 S1

S0

S=

ç' S1

s1

2

0

B;1

E'
00
E1

=

C)

(E)10

I

(E)20

=

S1
I

0

S

00 S0
CE1)10 .

0

+

(E)20

Nov

0 since it was selected to pivot on. Assuming only one T11 in

position

k0+1, then

=_o

k +1

T10

.

— 13

Hence

—

not both terms are zero arid they are not equal. But we have

uncovered

another

How do we know that

question:

0 so the pivot can be

made in D1? Let us answer this question first.
Then

Suppose ço.

S should not replace the r-th column in
k +1

the T1 column in E since S0 °

but

0. We have already seen how to accomplish

this. But of course this is not to the purpose, so after replacing T1 with S,
we must replace the r-th column of D1 with T1. We are assured that this is

possible since T, the second pivot, is also nonzero.
k +1
0. The ci.
Now suppose
we initially started to investigate
- k +1
is simply S0 ° and what makes it nonzero? Suppose it is zero. Then S
does

*

—1
not depend on T1 and vice-versa so Eco
need not be updated. This

seems like a nice answer but there is a catch.
Let us now assume there are several T-columns from block pl, say

in positions t1,t2,... Then

1 i ot
Now if ç=o,

we

can select any

magnitude. But if

0 for the interchange, say the largest

0 and the sum is zero, it is not necessarily true that

S is independent of all Tt. Furthermore if the sum is not zero but some S
are zero, they may not remain zero as individual updates to E are made.
Hence the updating of E may be order-dependent. (A similar phenomenon
occurs

in updating

situation
Note

GUB bases which are a special case of decomposition. The

is much messier in general block-angular models.)

k+l

-that

if S ° 0,

calculation and

hence

-

that

-

is, T11 does not

does not change.

enter

into the

— lI1

—

7. Cross-Block Exchanges
There

are two remaining cases to consider:

a column fran

the

fufl

A replacing a T-column, and a column fran block q replacing one from block p.

We will take up the latter first.
The calculation of S in the previous section showed that although

S2O, 2 might not be zero and the pivot might be selected fran this
segment. However, in this case, for sane r-index in p2 and some t-index in
p= 0,

Hence column S from block 1

old

replaces column Tt from block 2 in E. The

l

Tt2 must be dropped and

E1 is updated in

added to the T-columns

standard fashion. There is

Now suppose some column S from the full

for p1. The

no trouble

with

zero

values.

A0 is to replace sane T-column.

In this case,

E1

oo_

S

0

(E)10 S
(E)20
•

12

since S =S 0 and

igular a-column
dropped
We

are

from

0-0 .

s0

The

update of oo
E1 is standard, i.e. 0S is a

pivoting in some position r m0. The

is merely

the set for block p.

thus have the rather surprising result that inter-block exchanges

simpler tbari intra-block exchanges, except for p0. (A column from the full

A0 replacing

another in

is a standard operation, just like the

last case above.)

.

— 15

8.

—

Suixmaxy of Basis-Change Cases

We sumBarize here for nore convenient reference the various basis—

change cases analyzed in prior sections. The designation (p ,q) indicated
(in, out) with respect to blocks.

A. Case (o,o)
Some S from the

full A0 replaces another in Eco•

Standard LP update.

B. Case (o,p)
Same as Case (o,o) except the outgoing T-column must have its
dropped

from

the set p.

C. Case (p,o)

and T
Compute T
op
pp

Eooand add

with

D1. Use T'

p

as the entering column in

op
P to the set of T-columns for block p.
pp

D. Case (p,g)

Can

only occur as a change in E with one or irore columns

Tqq

in

effect. Drop the outgoing Tqq from the q set and then proceed

as in Case (p,o).

E. Case (p,p)
1.

0 where r is basis index of outgoing column.

Use
If

as the -co1umn to update

to D1.

O, done. ((E)0 O if and only

set of T-columns for block p is empty.)
proceed as follows:

if the

If not,

— 16 —

.
to

Update all

reflect the change in D.

Each one has a position index t. For

each

0,

use S0 as an entering column in E pivoting on

position t. This may have to be done recursively

until aU t are

processed.

(Note that

itself

changes with each such update.)

2.

p
In this case,

0. Select, say,

t

ft]

t°J

as

the t of

co1inrn,

interest. Theating Tt as

do Case (p ,q). (Actually qp but this is

ijirnaterial.) Now treating

(in

an outgoing

Tt

as an incoming co1i.nin

place of S which replaced it in E), do step 1.

above.

9. A Skeletal Decomposition Algorithm

Of the several algorithms which have been developed for block-angular
dnDmposition mdoels, the best-known and, probably for that reason, the
most successful have been those based on the Dantzig-Wolfe principle.

However, D-W algorithms

have often

proved unsatisifacotry in practice

although the generality of approach

The

is

sometimes indispensible.

concept of partitioning is not usually associated with D-W algorithms

and, in fact, all algorithms are sometimes regarded as falling into
D—W

or Generalized LP,

and

t classes:

partitioning schemes. But this is inaccurate.

- 17

—

D-W algorithms must deal with subproblems and a master or derived problem just

as any others do. The proper distinction is whether or not factorization of
the basis inverse is employed. In D-W algorithms, factorization of B1 is

implicitly used but no particular point is made of it. Nevertheless,
factorization is an outgrowth of Dantzig's old idea of a pseudo-basis. The
GUB

[5]
algorithm of Dantzig and Van Slyke when implemented with product-form

is a special case of complete factorization, or, more properly, complete
factorization of a special case of a block-angular model.
[3]
The Beale decomposition scheme, produced before computers were adequate,

used a form of pseudo-basis and what amounted to factorization. The block[4]
product algorithm developed by this writer used factorization essentiafly as
described in the preceding sections, though in more tortuous forms, combined
with a parametric RHS approach. Unfortunately, most readers focused on the

parametric aspects rather than the factorization. Also, the computer
implementations of the algorithm (of which there were t with a third variant
reportedly under development) fell into obscurity for nontechnical reasons.
Consequently, factorization as such is not well known. However, the
excellent performance of GUB algorithms in recent years ought to recommend

more attention to it. Furthermore, it is not antithetical to other concepts
but may be helpful to their successful implementation. Any reasonable

the factorization of B1.
Indeed, this is virtually the raison d'etre for decomposing block-angular
odels. The use of E1, while more complicated, avoids many of the
numerical problems of standard D-W algorithms and the associated slowalgorithm rrust, in this writer's opinion,

convergence properties.

employ

18 -

A

skeletal algorithm is outlined below. Points at which a user's

own variation are easily incorporated will be noted. The reason for such a
skeletal algorithm is to standardize and automate the various complicated
data handling problems and transformations which always occur. It is simply

iractical for each investigator to start building all his own system gear from
scratch. -iat is needed is an off-the-shelf decomposition "engine" which can
be

used in

a variety of "vehicles".

Step 0

Obtain, generate or guess a master pricing row
oi'" 'om' i.e., a set of dual

values

for the A .

A number

of

schemes for

obtaining ir0 have been proposed and

Any

meaningful

approach is

variable

several

used.

worth considering.

However, it must be realized that even if the
optimal ir

were provided,

no algorithm will

produce a global optimal solution in one sweep
except by sheer chance.
Step 1

Obtain a "good"

feasible

solution to each

subproblem

in the following form:

maximize

mjjiimjze

ii A subject to

r Ally1 lo
1°
H RI_I

10 BHX

lb

L JLJ L

arid

stated

I

ranges on the X,, where VP is

of m0 free variables.

a column

— 19

-

It is probably wasteful to fully optimize each
on

the first sweep but some irnprovnent

over the first feasible solution should be
obtained. If w0A goes unbounded, just stop
is incorrect.
at that point since presumably
[The user may have additional rules to impose here.]
Accumulate Z VP as the subproblems are solved.
P

If any subproblem is infeasible, the whole

model is andthere is no use continuing. Also

consuct
where
Step 2

the basic solution column

{ 0,

f,... ,

is the basic subcoliinn of

We have the following (probably infeasible)

solution

to the whole model.

B=]I D , the bases obtained in Step 1, with

pP

corresponding D
Since V +

P
.Z

p1

&X
AX

p p

D
pP
=

0, with

-

E

all X feasible,

V

p P
P

E1 where m =

m , hence

E

0

EI

EI

m' 00 0

p

— 20

—

Thus,

E000
U +App
X =b
•0
B
where

and

X b

(pl,. ..,P)

U0 is the subcoluinn of logical

has the vector value b0+ V .

PP

variables in X0

Only elements of

If the

U0 are prinially infeasible. U becomes

user wishes to use a D-W algorithm, he may alternatively
regard the VP as candidate columns and fonn the derived
problem

AX
A. zb0
00 -E E V.
Jp Jp

A.

=1

j

where

only jl for each p is presently defined.

The effect is the same in either event: If U0
is not feasible, a Phase 1 is now generated;

if it is, a Phase 2 .
to obtain

an atteirt is made
either feasibility or optiniality with
Then

A0X0 holding the V constant. If an unbounded

feasible solution
unbounded

is

found, the

whole model

is

and. nothing more need be done.

Otherwise a final

for this sweep is obtained,

whether Phase 1 or Phase 2. In general, E00 is
now of the form initially assumed in Section L,
with corresxnding

- 21

Step

-

2A An irrevocable decision must be made as to whether

to use factorization or not. If a D-W approach
or some other convergence scheme is employed, the

rest of the mechanics are essentially repetitions
of Step 1, possibly with user's selection and
termination rules. Otherwise, proceed to

Step 3 for factorization.
Step 3

Establish some tolersrice (negative upper limit
in the usual scheme) for an acceptable reduced

cost or "di". This should have a larger magnitude
than the standard system tolerance but must

progressively approach the latter as the end of
the phase nears.

Using the current ir , form R by adding* the f to

in Section 5. All

for p > 0. (Alternatively,

one could use the dual algorithm with two R-forms but

this is less practical, particularly if P is large,
requiring dual pricing of all subproblems.)
Comput? R0 and

price the

proceed to

corresponding

form

the

subproblems

for

pl , 2,...

and

until an acceptable

is found.

On the first sweep of Step 3 (the second sweep altogether), all

— 22

[The

—

user may wish to impose priority

rules

on

selection of p. If these are independent of
the current solution, the simplest way is to
input the subproblems in priority order in the

first place.]
Step Li.

A column S (say for variable X) from some block

ps has been selected to enter the solution (enter
the basis or change bound). First form

BSDS; -o
5

as

S
S

(S 0

in Section L.

should

0, s) This column

for p

be saved in case it is needed later.
=

Now compute S0 and all

for which

- exist.

will exist in any event.) As each pice is
generated, do pivot selection for

vs

retaining

,

pO,... ,s..

the subcolumn

for any

vector

(In fact, the entire

should be retained.)

At the end, some winning ratio
r

row r in block

t

or
change
is at hand.

of

bound

for

winning ratio.

X

— 23 —

The new solution vector must now be computed:
= B - 0

If a

change

,

over all nonzero

of bound occurred, we nay return

to Step 3 arid continue pricing.

Step 5

change of

basis

Depending

on whether

Otherwise

a

must be made in Step 5.
s 0, t0,

update the entire basis

and st,

inverse using

the

appropriate case from Section 8.
Step 6

Return to block 0 and reoptniize it (whether
in Phase 1 or Phase 2), updating the basis
as required and obtaining a new

Note

that this can possibly eliminate some
T-colurnns. Now return to Step 3.
Terminations:

1. Some subproblem is infeasible in Step 1.
No feasible solution to model.
2. An unbounded solution

is

found in Step 2.

Entire model is unbounded.
3.

No acceptable d found

tolerance
(a)

in

Step 3,

even after

is set to system standard,

In Phase 1, no feasible solution to model.

(b) In Phase 2, current solution is optimal.

— 24 —

ii..

No

0-value found in Step 4. (Can only happen in Phase 2

unless digital difficulties occur.) An unbounded solution
has been found, viz:

-

0

for any 0

> 0

References

[1]

Dantzig, George B., and P. Wolfe: Decomposition Principle for
Linear Programs, Operations Res., vol. 8, pp. 101-ill, 1960.

[2] Rosen, J.B.: Convex Partition Progranming, in Robert L. Graves
and Philip Wolfe (eds.), "Recent Advances in Mathematical
PrograrrnTling," pp. 159-176, McGraw-Hill Book Company, New York,
1963 (see list of references on p.176).

[3] Beale, E.M.L.:

The Simplex Method Using Pseudobasic Variailes
for Structural Linear-progranuiiing Problems, in Ibert L. Grave.s
and Philip Wolfe (eds.), "Recent Advances in Mathematical
Prograimting," pp. 133-148, McGraw-Hill Book Company, New York,
1963.

[4]

Orchard-Hays, W.: "Advanced Linear-Prograrriming Computing Techniques,"

McGraw-Hill Book Company, New York, 1968, particularly Chapters 10-12.
[5 TI

Dantzig, George B., and R .M. Van Slyke:
Techniques for Linear Prograiriming, pts.

Generalized Upper Bounding
1 and 2, Operations Res. Ctr.
Tech. Repts. ORC, 6 4-17 and aRC, 64-18, Univ. of California, Berkeley,

August 1964, arid

February

1965.

.

