A SYS1 OF SUBROIJrD'JES FOR ITERATIVELY
REWEIGH'rEa) LEAST SQUARES COUATIONS

avid Coleman*
Paul Fb11and*
Neil Kadent
Virginia KLelna*

Working Paper No. 189

National Bureau of Economic Research, Inc.
575 Teci-no1ogy Square

Cambridge, Massachusetts 02139

July 1977

This research was supported by the National Science Foundation under
Grants DCR75—08802 arid MCS76—11989.

*Natjonal Bureau of Economic Research, Inc., Computer Research Center,
575 Teciinoiogy Square, Cambridge, Massachusetts 02139.

*duatjonal Testing Service, Fosedale Read, Princeton, N. J. 085Ll0.
tDeparthient of Computer Science, University of Toronto, Toronto,
Canada M5S 1 A7.

ABSTRAC1'

A description of a system of subroutines to compute solutions

to the iteratively reweighted least squares problem is presented.
The weights are determined from the data and linear fit arid are

computed as functions of the scaled residuals. Iteratively
reweighted least squares is a part of robust statistics where
vvrobustnessfl nans relative insensitivity to iroderate departures

from assumptions. The software for iteratively reweighted least
squares is cast as semi-portable Fortran code whose performance

is unaffected (in the sense that performance will not be deaded)
by the computer or operating-system environment in which it is used.
An

start and an

s-tart are provided. Eight weight functions,
a numerical rank determination, convergence criterion, arid a
stem-and-leaf display are included.

Key Words and Phrases: least squares, data analysis, mathematical software,

portability, linear algebra, curve fitting, robust estimation, weight functions.
CR Categories 5.114 and 5.5

,
.
3
6
...8
TABLE OF CONTTS

Introduction

.1

Section 2 .
Section 1 .
Section 3

. . . . ,

,

•

. .

.Ac)ciow1edne.rits .

.

. .

.

.

.

. . . . .

...

,

•

26

. . ,

. 27

•

Introduction

The purpose of this paper is to describe a system of Fortran
subroutines written as modular mathematical software to solve the

iteratively reweighted least squares problem. The software includes
documentation for use and flow of control as comments in the subroutines.

The specifications from which the software was writ-ten are contained in

[12]. The collection of subroutines uses orthogonal factorizations by
Householder transformations or the singular value decomposition from
EISPACI( II [ 7] to compute the

start and iterations for reweighted

least squares. CL1 C 2] computes the £1 start, an overdeterrnined solution

in the
The computational tools that

eight

uzz+uT from the

the

provide include an

interactive

driver,

weight functions, John Tukey's stem-and-leaf display [15, 9] the diagonal

of the "hat" matrix

as

we

[10]

which is the projection matrix A effectively computed

singular

value decomposition [7] or

Householder transformations. Optionally, the

QQT from QR,

condition of the

matrix, the weights, residuals, and the convergence criterion can
displayed.

be

Two forms of equilibration are also provided [16].

The usual statistics information to display the number of observations,
number of

variables, maximum diagonal element of the "hat" matrix, condition

number of the weighted data matrix, the maximum absolute value of the

residuals, and
option

the minimum weight is optionally available. There is an

to provide the (weighted) sum of squared residuals, and the

absolute

sum of

residuals. Also available is the (weighted) R-squared statistic,

the (weighted) standard error, and the (weighted) F statistic.

—2—

The

software is presented in the form of a basis tape suitable for use

by the Fortran converter [1] from ThISL to produce target Fortran code
for CDC, Burroughs, Honeywell, PEP-i0, and Univac machines. The source

code is long precision IBM code acceptable to the Fortran converter,
The PFO1' verifier [lii.] was used to check the software,

We do not discuss the theoretical properties of iteratively
reweighted least squares or the tuning constants for the weight functions

in this paper. Father we refer the reader to Holland and Welsch [11]
for such information,

The organization of this paper is as follows,' Section 1 defines
the iteratively reweighted least squares problem. Section 2 describes
the selection of rank for the data matrix and the re-weighted data matrix.
Section 3 gives some numerical results. The weight functions are listed

in Table 1 of Section 1. The subroutines for the computation are listed
in Table 2 of Section 3. A copy of the subroutine to compute one of the
weight

functions, i.e., the Biweight weight function, is listed at the

end of

Section 3.

—3—

Section 1

The method of least squares has been the prim3ry technique for

fitting rrodels to data for many years and is versatile and numerically
stable when computationafly stable methods are used [13] Despite its
central role in the past, much work has been done by statisticians

to improve least squares in the sense of getting rrre information
about the data than is available from just the least squares solution or

from the matrix factorizations that are used to obtain it,
The area of work that our software addresses is robust regression
which is aimed at analyzing and
estimation when
attention

the

improving

the behavior of least squares

disturbances are not well-behaved. We focus our

on one of the computational procedures for robust linear

regression, iteratively reweighted least squares.

Consider the rrrdel b Ax + r where b is an nod, vector of observations,
A is an nrom data or desi-i matrix, x is an nxl vector of parameters,
and

r

is an mx]. vector, The notation b Ax + r corresponds to the

statistical notation y X8 + C where y is nxl, X is nxp,

is pxl,

and C is nxl,
The ordinary least squares problem is

r is a vector of residuals b - Ax,

and

mn !, ((r1 (x)

) / )2 where

s is a constant or fixed scale.

The weighted least squares problem is

n4n J1 W,

((r1

(x) ) / s

2

whicii

is solved by using ordinary least squares with W'2A and W'2b where W

is a diagonal matrix of weights that are functions of scaled residuals,
The iteratively reweighted least squares problem assumes a start

—

(

0),

which can be obtained from 22, ordinary, least squares, least

absolute residuals, that is to say) the overdetermined solution in
the
norm, previous iterations of iteratively reweighted least

(0)

squares, or a start specified by the user. Given x

, the problem

is iterated to obtain the least squares solution, "(k+l)
x
where the diagonal matrix

W

(W

(k+l)-'2

) A +

(W

(k+1)l/2

is computed as a function of scaled residuals-•

The residual scaling function we use is the maxiraim absolute deviation,

i,e,, the median of the absolute values of the non—zero residuals. The
modularity of the software makes readily possible the inclusion of
additional residual scaling functions such as the inner-quartile--range

of the residuals.

The software to -compute the weights includes the

eight weight functions listed in Table 1,

To test convergence of iteratively reweighted least squares we use

the

convergence criterion suggested by John Dennis [k], After the kth

iteration, we compute a scale.independent measure of the adient,

ATr, where r is the residuals b x, which. i,

T(k+l))l/2
where '

is the

r0))/ii (wk÷1))u'2 AII2 ii(w+1 )112

Euclidean norm,

The problem of iteratively reweighted least squares is a problem

in

optimization in

residuals,

the sense that one is minimizing a function of scaled

rlI2

) b

—5—

Table 1

Weight functions (where u scaled residual), range and default tuning constants.

Ne
ANDREWS

W(u)

wA(u)

[

sifl(u/A)/(u/A)

A 1.339
lul

BIWEIGHT
____

[1 — (u/B) 22
]

w3(u)

0
CAUCHY

FAIR

HUBER

wF(u)

l/(1÷ lw/Fl)

1

H/lul

LOGISTIC

TALWAR

[

1

B

4.685

C 2.385

F 1.400
lul

H

H 1.345

lul>H

(tanh(u/L)Y(u/L)

wL(u)

wT(u)

B

(U/C)2)

11(1+

[

lul

>A

luI>B

wc(u)

wH(u)

Tuning Constant

Range

L

lul

< T

1.205

T 2.795

lul>T
WELSCH

wR(u)

e

R 2.985

—6

Section

2

points for the iterations include 22, ordinary least squares
and Li, the overdetermined solution in the
norm [2] which corresponds
Starting

least-absolute-residuals regression, The £2 start and iterations subsequent
to the
L2 or user-supplied start are computed by orthogonal fractorizations,
to

i,e, Householder transfon'na.tions or a cornbina-tjon of Householder
transformations

and the singular value decomposition.

The way in which we decide to use the QR (Householder transformations)
or a combination of QR and MINFIT [7] (least-squares solution by singular

value decomposition) needs some explanation, Frequently the data matrix, A,

in the statistical rrydel b Ax + r has some variables (colurr-is) that are

close in the numerical sense to being linear combinations of other columns

of A. Since such a situation may occur the numerical rank [8 ] of A must
be determined before proceeding with the least-squares computation, The
numerical rank should be determined by the user, and the determination of

rank should be made with respect to the certainty of the data. Since the
rank must be determined at every iteration (reweighting may down-weight rows, i. e.,
observations, to the extent

rank degeneracy) it

is

that the effective deletion of observations creates

necessary to estimate the condition of the weighted A

as inexpensively as possible. For the £2 start arid for all iterations after any
start we default to a QR factorization with column pivoting. Unless A is
exactly singular

the completion of the QR factorization of A provides

the upper triangular factor R whose condition is that of A. The condition
estimate using R [ 3] is only 0(n2) operations, gives a reliable measure of the
ill-conditioning of A, and Is used to determine whether QR is computationally
sufficient or whether the computationally rrre expensive singular value
decomposition, MINFIT, is necessary,

—7—

We strongly believe that the user should determine the rank of his
data
the

or desig-i matrix

inspecting the singular values of A (which are
sai as those of R). However we provide a conservative default
by

deternjnatjon of rank associated with the condition of the matrix at each

iteration relative to the square-root

of

the precision of the computing machine

is used. Explicitly, the condition estimate of R as obtained by [3 ]
an estimate of the largest arid smallest singular values, a and

that

is

of A. If the ratio (amm
. Iamax
of

)

< C1'2

where c is the relative precision

the arithmetic of the computing machine, the computation is continued

by using the singular value decomposition. When the. singular value

decomposition is used the number, k, of singular values
> . .
such that
. • . a
. a] > O
a1
ak+l

0, is

detenthied from the certainty of the data or from the square root of the
precision of the computing machine, whichever is larger.

—8—,

Section 3
The software to compute the solutions to the iteratively reweighted

least squares problem consists of 17,500 lines of code, comments, and

documentation
that

for use. The 17,500 lines includes all of the software

is required for the interactive driver and its options for use plus

a selection of test matrices, The software includes ThelptT corrmands

to give on-line information to users. The interactive driver is desied
to operate effectively on any computer system that permits the transmission

of four characters to and from a terminal. The subroutines, however,

can also be used in a batch environment. With the exception of CU, all

of the software is desiied to be processed by the Fortran

converter.

We have included a selection of test matrices including those from
C

5]. We chose this particular

widespread use of £ S ] as

collection

a reference and

of matrices

because

of the

text. The matrices are cast

in integer form and then assi-ied as floating point numbers to insure
that there is uniform input to a variety of computing machines.
The name and a brief description of the subroutines that are needed
for an options of the iteratively reweighted least squares problem are

listed in Table 2 of this section.
Selected results from one of the weight functions, Biweight, and

the terminal
Table 2.

session used to compute the results applied to C 6

]

follows

—9—

The data

iratrix given in C

1
1

1
1
A —

1
1
1
1
1
1

.499
.658
.601+

.4141

.550
.528
.14.18

.480
.406
.467

6 J

is

11.1
8.9

8.8
8.9
8.8

9.9
10.7
10.5
10.5
10.7

11.111.

12.71+

13.13
11.51
12.38
12.60
11.13
11.70
11.02
11.41_J

and

has singular values

31.6,

.109, and .395.

—10—
Thbl. 2

C
C

NAME

C
C
C
C

EQOl

C
C
C
C.

C
C
C
C
C

.

C
C
C
C
C
C
C
C
C

.

£002
E003
EQO4
£005
EUNORM
GETXLI
HMATSV
HMATQR
IERRIO
IFLOOR
IRLSOR
IRLSSV
NATIOI
MINFIT
NINSOL
MSG1
PERMUT
ORI
ORISOL
RESTOR
RESIDL
SCLMAD

SLDSPY
SLLEAF
SLPRHT

SLSCAL

C

SLSORT
SMAD
STARTO
STARTS
START2
START3
SVMAX
SVMIN
UNIFOS
WANDPW
WBIWGT
WCAUCH
WELSCH
WFAIR
WGRADS
WGRAD2
WHUBER
WLOGIS
WTALWR
WUSER

C
C

C
C
C
C

C
C
C

C
C
C

C
C
C

C
C
C
C
C
C

HEAOO37O
.

C
C
C
C
C

C
C
C
C
C

DESCRIPTION

HEAOO38O

HEAOOZVO
MODIFIED ROW—INF—EOUILIBRAT!ON
HEAOO400
COLUMN (MAX. ELEMENT) EQUILIBRATION
HEAOO41'O
ROW (MAX. ELEMENT) EQUILIBRATION
HEAOO42O
COLUMN (SORT. SUM OF SQUARES) EQUILIBRATION
HEAOO43O
ROW CSQRT. SUM OF SQUARES) EQUILIBRATION
HEAOO44'O
EUCLIDIAN (SORT. SUM OF SQUARES) NORM
HEAOO4SO
GET THE LI START VECTOR
HEAOO46O
FORMS DIAG OF H—MATuU*SIGMA*SIGMA—PSEUDO—INV*U—TRANS HEAOO47O
FORMS DIAG OF H—MAT—O*Q—TRANS
HEAOO4SO
WRITES IERR PARAMETER ON DSET
HEAOO49O
INTEGER FUNCTION FINDS FLOOR(REAL) $$
HEAOO500
SUBROUTINE TO DO ONE I R L S ITERATION (ORSOL)
HEAOO5SO
SUBROUTINE TO DO ONE I R L S ITERATION (MINSOL)
HEAOOS2O
WRITES MATRIX ON DSETr OPTIONAL HEADING
HEAOO5ZO
SINGULAR VALUE DECOMPOSITION AU*SIGMA*V—TRANSP
HEAOOS4O
SOLVES AX—B GIVEN OUTPUT FROM MINFIT
HEAOOSSO
WRITES VARIABLE—LENGTH MESSAGE ON DSET
HEAOO$60
MATRIX COLUMN PERMUTATION
HEAOO57O
OR DECOHPOSITION. 0 ORTHOGONAL TRANSFORMATIONS
HEAOO5SO
.
SCtVES AXwB USING OR1
HEAOO5PO
RESTORE HATRIX WEIGHTS
HEAOOÔOO
COMPUTES RESIDUAL B—AX
HEAOO6IO
SCALE RESIDUALS BY SCALING FACTOR
HEAOO62O
DOES STEM AND LEAF DISPLAY (CALLS OTHERS) St
HEAOO6ZO
DETERMINES STEMS AND LEAVES $5
HEAOO64O
PRINTS STEM AND LEAF DISPLAY $5
HEAOO6ZO
DETERMINES SCALE FACTOR AND UNIT FOR DISPLAY $5
HEAOO66O
SHELL SORT IN INCREASING ORDER $5
HEAOO67O
DETERMINED MAD SCALING FACTOR
HEAOO680
USER START FOR I R L S
HEAOO6PO
Li START (FROM CLI) FOR I R L S
HEAOO700
HEAOO7SO
L2 START CFROM MINSOL) FOR I R L S
HEAOO72O
L2 START (FROII ORS) FOR I R L S
HEAOOflO
ESTIMATES LARGEST S.V. OF UPPER TRIANGULAR MATRIX
ESTIMATES SMALLEST S.V. OF UPPER TRIANGULAR MATRIX HEAO074
UNIFORM (O,.) RANDOM NUMBER GENERATOR FUNCTION
HEAOO75O
HEAOO76O
ANDREWS WEIGHTING UNCTI0N S
BI4JEIGHT (BISQUARE) WEIGHTING FUNCTION S
HEAOO77O
HEAOO1SO
CAUCHY WEIGHTING FUNCTION S
WELOCH WEIGHTING.FUNCTION $
HEAOO79O
FAIR WEIGHTING FUNCTION $
HEAOOSOO
COMPUTES GRADIENT
HEAOOSSO
COMPUTES SCALE INDEPENDANT MEASURE OF GRADIENT
HEAOOG2O
HUBER WEIGHTING FUNCTION $
HEAOOG3O
LOGISTIC WEIGHTING FUNCTION $
HEA0040
TALWAR (ZERO—ONE) WEiGHTING FUNCTION S
HEA0085O
USER—DEFInED WEIGHTING FUNCTION $
HEAOOS6O
HEAOOG7O
.

.

S

.

HEA000SO

.

HEA0089O
HEAOO900
HEAOO9IO

$ — WEIGHTING FUNCTIONS USED IN WEIGHTED LEAST SQUARES
$5 — PART or STEM AND LEAF

.

HEAOO92O

HEAOOP3O

— 11

Table

C

NAME

—

2 con't.

DESCRIPTION

HEAOO37O

C

HEAOO300

C

C
C
C
C
C
C
C

CL1
IJELP1

IRHELP

IRLDR
IROPN
IROPNN

HEAOO39O

DOES AN Li START

PRINTS HELP FOR I R L S
I r L S HELP COMHANt'
INTERACTIVE DRIVER FOR I R L S
GETS Ii OPTION FOR I R L S
GETS 12 OPTION GR I R L S

C.

IROPR
IRPRNT

GETS REAL OPTION FOR I
I R L S PRINT COMMAND

C

IRPROP

C
C
C

IRSTAT
IRSTLF

L S OPTIONS COMNti
I R L S STATISTICS COMMAND
I R L S STEHaLEcF COMMAND
GETS DATA MAT[JX FOR I R L S
GETS RHS VECTOR FOR I R L S

MATOA

C
C

MATOE

C
C

MAY02

C

MATO4
MATO5
MATO6

C

MAY01

MAT0

C
C

IIATO7

C

HAlO?
MATIO

C

C
C
C
C
C
C
C

1
C'
U

MATO8

MATh
MAY12

tiAii3

RLC

IR

A(I,J) = J * SURT(R)
A(I,J) J / D
A(IJ)
(I ' J) / Li
A(I,J) = 1 / C 1 + ABS(J—I) )
TLONGLEY riAT(,

TLONGLEY F:HS
SLONOLEY DATA

LONGLIY Rt'IS
LONGLEY DATA
1JPFE[

HEAOO400
HEAOO41O

H11A00420
HEAOO43O
HEAOO44O

HEA00'30
HEAOO46O
HEAOO47O

HEA00'E0
HEAOO49O

HEA00oO
HEAOO51.i)
HEAOOZ2()

HEA000
HEA00'10
HEAOO55.:I

HEA005o
HEAO07O
HEA0OO
HEA003O
HEA00.cO

TRIANCL'L ACM) MATRYX

AUCJ FS

HEAOO61O
HEAOO62O

HEAO06:o

DAUERII DATA
BA(iEr DATA

HEAOO64D

HEA006:)
IDEU ITY EIAIRIX p cQN6rAT ROLlS OR COLS AFENDED
HEAO0.')
MAT15
(I--2/.E;:ET) SIGMA * (I—2/N*EET M(TR:':X
HEAOO67O
OTHER MA rxx fOUTfl'E (MAT1ó — MAY47) INCLUDE t'RAPEkSITH FROfiLISHAOCO
tIAT14

HEA000',9O
•,40t,00
* *4I*l*t4$ III 00
•,.
••, • • • •11
•. ** •0400+00.0
, •,s,* , * •*,,I 4•4(
• I 0*4110*
0*40*044•l••4•
* 4*444401*04.1,,,,.,,
•. *• 4
c •LrrAm(
• oriL 4 ii—i'
•

• *

4,4,0,0,,
••4•t
*44*144,00,40.
4•4040444** I 444001404*44 • 0*I400•*•44 •P4Af/'o.
•*4 •0•t*
00*4
It*P0**400•e4*,,,,.•,
r14J./

— 12

Sairp1e Terminal

load

Session

with some

—

Nunrical Results

irlsdr (start

EXECUTION BEGINS,.,
I R L S ENVIRONMENT IWITIALIZEII
FOR LISTING OF COMMANDS TYPE HELP
SPECIAL OPTION NUMBERS:

9 (Ii) OR 99 (12) PRINTS HELP
8 (Ii) OR 9 (12) KEEPS OLD OPTION

TYPE OPTIONS ON A NEW LINE

IRLS COMMAND (A4)

OPTION NJMDER? (Ii):
IRLS COMMAND (A4):
OPTION NUMBER? (Ii):
IRLS COMMAND (A4:
OPTION NUMBER? (12):
IRLS COMMAND (A4)
OPTION NLJtII3ER? (Ii):
IRLS COMMAND (A4)
oPnoN NUMBER'? (Ii)
I RLS CONAND (A4 )
OPTION NUMLERT (Ii)
I RLS COMMANO ( 4

(9 GETS HELP)

(95'

=

1

IRLS COMHANi

GETS HEL.P)

(9 GETS HELP)

(9 GETS IELF
(9 GETS Fk.LP)

OPTION NUtIE:ERT (Ii)

IER

GETS HELP)

(9

(9

GETS MELt)

OUTPUT FROM Li START

((

• )iter

ITERATION

IRL3 COi1i-L (A4

1 T'fl[

>prcoO•prin

NUMBER? (1fl (9 GETS

OPTION

HELI:

IRLS COMMAND A4:

AFTER ITERATION
1 X =
o , 8992O67l:fcJ. 0. 93i9223):i+o —O 1 Yi652!+00
PREVIOUS X =
O.9OS3?C4t'O1 O,9109109tt4•Oi --O.17090.2DO0

I
1

2

3

RESIflUL (I)

0. 100i.23:?r--ol
4 —O • 649T91:r-o1
5 •O , 227OiS+OO
6
7
8

9

lit X'G .t

0. 10000000+31

0. 44615?D00

.25400;'D+3Q

0 • 6OY•"0tHO0
• 92H2O57Li+0) 0. 251.0203D00

0, 9o769:n•
(•i

0 • 3SS9'oEt;•oo

o . o12For.'1oo 0. 14i'427r•fo0
0, 99071 0: ri+0o 0, 2O73i7I:+o0
01 0. io000o1'tc 0.2111 ?300i•o0

0. 7O°c7715D-Oj

0. 34):rv

0

10 —o •

773'.i-- 01

0•

100O0O000: 0 * 32i07OD+0O

92A76L0i 0 97127:;2u uO 0. 2'.3o72D+0O

GRAIl) ENT ( rU
()

WtIAC ( I)

O546r±O' 0 1O9-O29r.•O0
Q,747j! —•Di 0 7722D400 0
0. 59701901f'jO

c'F;G:N: :...:vt.L )

0. 29IJ57r+oc 0

•

I I.LS CLJW('Ni

(

1

OPTION Jr.C)T (Ifl (9 GLIS HELP
5 IP

i

S

s'TEt•c.:'-L.r t'IiftI.. AV

N

10

- 13
—0.5978

LO I

1

—

C UNIT =

O.1000D—01

)

12

2
2

—2

2

—1

4

—0. I 96

4

—0 I

—1. I
I

3

0 1134
0. I 77

I

HI

3

I

0.3359

IERR =

0 F01 R[SIDULS
IRLS CONNE.ND (A4).
> stem . 2
OPTION NUER? (1U (9 GETS

HELP)

TR IX

STEh—i4t-Lr:Lr DISPIJY

Ui I

1

( UNIT =

10

0.554?
0.1000t'-Ol

)

F15

2

2

SI

2

Ii. I

3

Fl
017
9. I 099

91
112

2
3
4

3

10

3

1 000

0 FO1 rirnNAL.

1ERR

N =

IRLS COMHNI (ñ4)

LL[Em. Q[: W-'TRT

>stci•3

OPTION NtThtEF.? (ii): (9 GETS EI.F)
H-iATRIX

STEI•:—LEAr rtIs:L(y r

( tfl'!IT

1

1 14

N

O.1000T,01

10

— 1k

1.18

2

5
5
3
2
2

2 1134

1

HI I

KERR

•

—

2.158

3 £2
3.1
4 14

0.6808

0 FOR DIAGONAL ELEHENTS or H—MATRIX

IflLS COMMAND (A4)8

bsta$09*tter
OPTION NUMSIfl C12fl (99 GETS HELP)
IRLS COMMAND A4):
** ITERATION
2 bOUE
ITERATION
3 DOUE
** ITERATION
4 DONE
** ITERATION
5 DONE
$* ITERATION
6 DONE
** ITERATION
7 DONE
** ITERATION
8 DONE
** ITERATION
9 bONE
** ITERATION
10 DONC
AFTER ITERATION
10 X a
0.9483807Dt01 0.896?400D+01 —0. 2055357D+00
PREVIOUR X
0 • 94005020+01
0 • C96971 90+01 —04 2053066D+00

**

I

I
2
3
4
5
6
7
8

9
10

RESIDLIALCI)

WDIAGCI)

HDIAGCI)

—0.53709Z08+00 0.47796650+00 0.26O1124D+00
0.8163179)3-01 0.99257340+00 0 • 2529899D+00
0.3059782)3—01 0.99O3490D+00 0.4461462D+00
—0.99624OD—01 0.9890925D+OO 0.6597202D+O0
—0.2271626D+Q0 O.9424843D+O0 0.23770270+00
0.416209r1n+oo 0.8070726D: 00 0. 1199851D+00
0.9705210)3—01 0 •9O?5256D+00 0.27201000+00
0.69966150—01 0. 9945766D+00 0.1957716)3400
O.5335376D—01 0 .9960091D+O0 0.3197170D+00
—O.62350S0D-01 0.99063440+00 0.23554 1 D+00

CRDIENT CCONVERREHCC LEVEL) —
?0.8010088U—03. —0. 70?30c2D-c.3 —0.10262000-02

— 15 —

IRLS COMMAND (A4)
>ma>ci*20tstep*10$jter
OPTION NUMBER? (12): (99 GETS HELP)
IRLS COMMANt' (A4):

OPTION NUMBER? (12): (99 GETS HELF)
IRLS COMMAND CM):
** ITERATION
11 DONE
** ITERATION
12 DONE
13 DONE
** ITERATION
** ITERATION
14 DONE
** ITERATION 15 DONE
** ITERATION
16 DONE
** ITERATION
17 DONE
18 DONE
** ITERATION
** ITERATION
19 DONE
** ITERATION
20 DONE
20 X =
AFTER ITERATION
O.9488401t'+Oi 0,8964120t'+Ol —0 • 205e397t'+00
PREVIOUS X =
•

O.94O34D+O1 0.8964131D+01 —0 • 20535C6D+00
RESIDUAL(t)
1 —0.5365333fl+00

0 •

2 0.8169217t'-Ol

0. 9925609D+00

3 0,3875669D—01

0 •

4 —0,9950503D—01
5 —0.2271803D+00

6 0,416475D+00
7 0,9721647ti-01
8 0,702.cj(J:—oj
9 0.53619tT-o1

10 —0.62O254oD—

HDIAO( I)

WDIAG( I)

I

0 •

67910S1D+00
998375711+00

9639630D+00

0 • 9 ' 246 SE' + 00
0 • E06ó322D+00

0 • 2607970t1+00
0. 2530 100D+O0

0. 446120DF00

0 • 6594á30tl+00
0.2377160t1+00

0. 1i9Gi3rlfoo
0, 9894.49D1-00 0. 2719496tI+.)0
0. 99445'601.t+00

0. 996798t'+00
0 .9971 14D+00

0. i556213ri+oo
0.3197342D 00
0 23s736sri-oo
•

GRADIENT (CONVFSGLHCE LEV:T..) =

—0 ,4263579Ll—0 —0 3806967D—(j —0. 496056D--05

IRLS CO .N1) (A'i

• >Steff 1

OPTION NU1J[RT (Ii (9 GE1L3 HELP)
RESIt'UALS

STEM— v—LF DISPLAY, N

1

LO I

( UNIT =
2
2

4
4

S
5

1

—0,5365

0.1000D-01 )

—2 I 2
—1.
—1

I
I

—0. I 96
—0 I

0I3

0. I 5789

HI I

0.416'.5

10

— 16 —

0 FOR RESIDUALS
IERR =
IRLS COMMANI) (A4)

>ster2

OPTION NuMEER? (Ii): (9 GETS HELP)

U—MATRIX

STEM—AND—LEAF DISPLAY, N =

0.6791

LO I

2

( UNIT=

10

0,0067

O.1000D—02

94 12

3
3
3
3
5
5

95 I
96 I
97 I

98 189
99 I 24563

c:L 4)
)stem3

0 FOR IGONAL ELEMENTS OF w—MATRIX

ILir
IRLS

OPTION N1JMIER?

(Ii):

9 GETS HELP)

H—MATRIX

DISPLAY N

STEM (;?!HLEAF

uNIT =

o,iooo1:••-(i

1 Ii
1.19
2 133

1

2
4

2.I67

3

311

3

0,462

HI I

0.695

0 rO J1(GJNi. ELI EN1S OF H—MATRIX

TERR

I1t.S COMMAWr,

>sti01
OPT icni

10

>

:

r3( 9 GETS HELP

Nu:;EE' ( 17)

I RLS CO' ( ('1
OPT TON NUTE? Ti.
I
ii... S c n

OT I UN NUN!LR

9 rJriS IflJ.r

Ii): ( 9

GLTS H:L_P

— 17 —

0 FROM QR START AND RANK TEST
IRLS COMMAND A4:
IERR =

>iter
** ITERATION
1 DONE
IRLS COMMAND (A4):
>prco*0*priri

OPTION NUMDER? (lU: (9 GETS HELP)
IRLS COMMAND (A4):
X =
AFTER ITERATION
1
0,807929D+01 0,9728491D+01 —0,2274461D+00
PREVIOUS X =
0.1030152D+02 0,8494711D+01 —0.2663214D+00
RESIJ:'UALfl
1 —0.4987939Ti+00

WDIAG( I)

I

0.7268122D+00

Hr.'IAG( I)
0 •

296944tiUi0
2609452t1 F00

0,058436411—01
0,513E344Li—01
—0.1229230D+O0
—0.2270730D; 00

0 • 9934683 ti + 00
0 • 99763F37t1+00
0 • 961 190 1D+00

0 •

0. 9134825r1•:00
0. 7190397D+00

o .230144311+00

0.1072354D+0O
8 0,9057973D—01
9 0.64C()4D--0l
10 —0.40'606Th—Cl

0.9775559tt+00

0 • 267898611+00

0. 9009222P+00
0 • 99396'6t'+00
0 • 9998'O0ti+00

0.109230911+00
0,324567111+00

2
3
4
5

6 0.43314451itO0
7

0 .4560911D+00
0 • 64194!8D+00

0.964341811—01

0 •

235798311+00

GRADIENT C vEr3:wCE LEVEL) =

o,38612;3D--oi 0,2549i3ti—01 ,62O052D—01

IRLS COt1HAND (Al)

3t(i 1

OPTiON NtJiEE? ( 11 )

(9 GEM HELP)

RES ID U .L S

STDH(iND—LE(F LiPLY, N
LO I

1

UNIT

-0.4980
0.100011—01

—2 12
—1. I
—1 12
—0. I
—0 14

2

2
3
3
4

4

01

4

0, I 5J'

2

1 10

1

HI

IE1d

I

0.4351

0 FO FFSILIUALB

I1L tc)t;(:r' (4
>t-:-2
01.1

1ti4 NtJML.h:? (Il) (9 1TS HELl)
W—iiAT x

10

— 18

STEM—AND—LEAF DISPLAY, N =

2

LO I

( UNIT =
3
3
3
3
3
4
5

5
4

0.7198

—

10

0.7260

0.l000t'-02

91 13
92
93

1

I

94 I
95 I

96
Ii
97 I?
90 10
99

I 3:379

IERR =
0 FOR t'IOL ELEHENTS OF W—i'IATRIX
IRLS COMM(WD (A'

>stefflZ

OPTION NUMDER? (Ii)

(9 GETS HELl')

H—MATRIX

SIEN-AND--LEAF DISPLAY9 N

UNIT =
1

1
2

4
3

3
2

O,1000D-O1

0.19
11
1.10
2 133
2. I 669
3 12
3, I

2
2

41
4.15

1

Ill I

0.6419

10

— 19 -

• IERR =

0 FOR DIAGONAL ELEMENTS or H-MATRIX
IRLS COMMAND (A4':
>ste*O9* i ter
OPTION NUHER? (12) (99 GETS HELP)
IRLS COMMAND (A1)
** ITERATION
2 DONE
** ITERATION
3 Li ONE
** ITERATION
4 DONE
** ITERATION
DONE
** ITERATION
6 [lONE
** ITERATION
7 DO NE
** ITERATION
8 ['ONE
** ITERATION
9 DO NE
**. ITERATION

10

LION E

AFTER ITERATION
10 X =
o 8800965D+O1
0. 941993 ti+0i -0, i37072D+O0
PREVIOUS X =
0 .8827831D+Ol 0 ,94014O7L:0i. —'O 1 'c956D{00
I
RESIDhiL(I)
1 —0,6179779t'+OO

wr'ic; ( I i
0 4 7 o EJ 3 u7

ii

+ 00

2 0.8068059Lt—O1
3 0.2165610r1—01

0•

4 —0.4718711L'--Ol

O • 99

5 —O.219667SDOC
6 0.3803538t' 0

O.79i0O5t' Oo

0 • 234376)'f 00
o i 23/706Li-00

O • 992 t l :1.0 Li + 00

0 *

7

O,722067iiT'-Ol

8 0.26Th57J'—01

9 0.43830SD-01
10 —0,1O937Ofl1O0

999421it+00

HDIAC I)

0, i42304D00

o • 9992975t'+OO

6 V D + 00

0 93311721,1+00

0 • 99Cfl?3Li+O0

0 • 9'72916DI00
O,914OJ i7D+0

GRADIENT (COUVEEWCE LEVEL) =

0. 233161fl+

00

0 • 4526957D0')
o * 699060(Ef 00
•

2Gi56;r+00
0.222i32r;o0

o • 320000'?'il+C'O

0.2Z/31J2Li•:;o

0.7703324D—07 0.67699i3:-o2 0.9:i.670301)--02

— 20 —

.IRLS COMMAND A4):
>step*lOtiter
OPTION NUMBER? <12): (99 GETS HELP>
IRLS COMMAND (A4)
ii DONE
** ITERATION
12 DONE
** ITERATION
** ITERATION
13 DONE
14 DONE
** ITERATION
15 DONE
** ITERATION
16 DONE
** ITERATION
** ITERATION
17 DONE
** ITERATION 18 tIONE
$* ITERATION
19 DONE
** ITERATION 20 DONE
AFTER ITERATION
20 X =
0.8720285D+01 0,9475467tt+01 —0,1511232t'+OO
PREVIOUS X
O,8722084t1+01 0,9474230D+01 —0,1515493D+00

I

RESIDUAL(I)
1 —0.62774S7DO0
2 0.8007077F1"-O1

3 0.1905696D--Oi

—0,41299O.--0i
5 —0.219267Ei0
6 0.37570I:•00
4

UDIAG (I)
0 .4540247D+00

0.991 1210D+00
0 • 9994942D+00
0 • 9976236t1+00
0.9 34 z 3 It + 00
0 • 004420411+00

7

0.691979011-01

0 • 993iQ0t+00

8

0.2143430L—0i

o.9993S69rJ••oo

10 —0,115i000t'i00

0 * 901 o993'+00

9 0.42618070—01

0. 9974U221i+00

HDIAG(I)

0, 13650070+00

0,2530704D+00
0 425619D+00
•

0 • 7029458t1+00

0.2343049D+00

0 1316020D+00
0. 2027640D+00
0 • 2252373Df 00
0 .3200544D+00
0 2608286t1+00

GRADIENT (CONVERGENCE LEVEL) =

0.5199742t1—03 0. 456i387D-03 0 .6202752D—03
IRLS COIMAND (A4)

> stm 1

OPTION NUMDER? (I1)

(9 GETS HfLP)

R ES : DUAL S

STEMLI LEA ttISLAYr N =
1

2
2
3

3
4
3
3

1

I LRR

—0.6277

LO I
UNIT =

0,1000tl—01

—211
—1. I

—1 Ii
—0. I
—0 14

0 1124
0. I 68
HI I

0 FÜR JS 1 ULS

10

0.3758

)

— 2]. —

IRLSCOMMAND (A4).
>stem$2
OPTION NUMBER? (I1) (9 GETS HELP)

W—MATRIX

STEM—AND-LEAF DISPLAY, N

2

LO I
( UNIT =

3

0.8044

O.1000D—02

93 13

3
3

94 I

3

96 I
97 I

3
4
6

O,454ii

10

95 I
9811
99

I 137799

IERR =

0 FOR DIA6WAL ILEIIEg4IS OF L4—MATRIX
IRLS COMMAM[ .A4):

> stern*3
OPTION

NUli:ER? (I1) (9 GETS HELP)
H—MATRIX

STEM—AND—LEAF DISPLAY,

UNIT =
1

2
4

3
3
2
2
-,

1

TERR

10

0.l000ti—O1

I 33

1, I

2 123

2,1568

3 12
3. I

41

¶4 T£ J

A

HI 1

0.7029

0 FOr JYiC(L ELEMENTS OF H-MATRIX

— 22

In conclusion we show the listing of one subroutine - the Biweight
weight function. The software on tape for the iteratively reweighted
least squares problem is available from the Algorithms Distribution

Service, The authors of this paper are responsible for any modifications
that subsequent use may show to be necessary.

— 23 —

SUDROUTINE WBIWGT(N,U,CONST,sQW)
C *****PARAHE.TERS
INTEGER N

WBI0001O
WBI0002O
(48100030
un 100040

REAL*8 U(N)CONST,SQW(N)
C *****LOCAL VARIABLES:
IN TEGER

I

REAL*8

OFLIM,UFETA,U1,PROD

WBI000,0
WDI0006O
WBI0007O
WBI000Bo
WBI0009O

C *****FUNCTI ONS:
REALY 8
DABS
C

c
S..

WBIOO1C'O

,, •5 • • + +545i••, •s ,,,,5 5i•,s4•d .5,,,., ii,,,,,, •i,•,,,•, ii,,,,,,
••i+•**$I•I+++t4t5et$t444+dtst••t4*•d••d*•e44i.•+4,4,+,,,,,,4,,+,.wLVv
dffdtd +444i4 444.4 f idi •i+d 4d5 45 6+14 544544 .5*44, 54*6544 54 III +554(5

WDIOO1IO

•,

•t 4, ++t + .4, 4+, 4 •4iG+• + 4i•••• 64•tittt•t• *5,4*4 •+•54+++ee •++ i • 4+t* •WL'L'JViJ.j'J
C

WrJIooJ.io

C

WBI00150

C ***puRrosE:
c
C

C
C
C

c
C

UET00160

THIS 6I'rRouTINE PRODUCES THE SfWARE ROOTS OF THE WEIGHTS
WBIOOI?0
DETERU:Nri J3Y THE INFIJI VECTOR U OF PREVIOUSLY COMPUTED
WBIOOJ.8O
SCALED HESIDUALS AND THE DIWEIGHT (t'ISOUARE) WEIGHT FUNCTiON, (1) WEI00190
Wt'I00200

r'EscRIPTIo:

WtsIOO2i3
WEI002;C'

ON I14UT:

C
C

WDI002O

C

N MUST )E SET TO THE NUiiTR OF ELEMENTS IN THE V[CTORS U AND
SQWS

C
C

U CONTAINS THE STANDARDIZED RESIDUALS FROI A PREVIOUS LIHAR

THAT IS, WI)

C

En,

C

RESIDUAL

C

ANi) S

R(I) / S WHERE ri) IS 111 1-TH
ROH A LINEAR FIT, R(I) = YCI) — YFITTEJI),

(4B100250

WBI002O
WB100270
tJDIOO200

WII002)
WDIOO300

S(R) IS A RESIDUAL SCALING FINcrION CE, C • S COUL1 L)tI0OJ.0
DE THE OUTPUT OF THE FORTRAN SUFIROUTINE SMAI:).

C
C

L4DIoo3:o

CONSI 75 THE 'TUNING COHSIAUT' FOR THE WEISHT FUL!CT ION

C

C

UCU) •

WDIU0O

CONST IUST LE iUi;xriva (SEE APPLICATION

WDIOO3L)

ANJ) USACE RES1R!CTIO'6),

C

C
C
C

t4DI002'

tiflI0070

ON OhiTrUT:

wiIoo:sco
WDIOo3qo

SOW CONTAINS A VECT0 OF THE SQUARL ROOTS OF THF L.FGHTS
DETERMINED DY THE SCALED RE3IDUAS AND TIE ifl TGHTI.1t

C

C
C

WSI0 C0
WBIO61O

FUNCTION,

C

C **$:(FrI_i

c

ANn IJsca;f: RFSTI<ICt

WEI00•'2j
Wtt10043(

IONS:

WEI004'O

C
C
C
C

THE LO r•—•E1;HrS (R iEEDDi FUR THE CO;UTnTIciH or iic
]TFRATI VEI...y 1LLE:. Ii;HTLLs LEAST SfltiAtES LSTXHArLs USIN ii 5

C
C

AND IRL Y—VECTOH. (1

WBIOO4
WEI0I9C

THE I..AfCr R

W5100510

C
C
C
C
C
C
C

C
C
C

WDIO0 tO
WtIO047c

(ti

FORTr:N SUfCJU lINES MI I:FIT
HINSOL •
lrJ TI (IS CONUTTJ:cJN
SOW
) NULTIFLILS •IHE CoRrEsr•oin:'i:jo ROWS (IF THE XMATRIx
C

or

LJ(U)

IF CON

TH Vi':LIIE OF CUS1 TILE MORE NEARJ_Y ALL THE V(LUS

(jILL EQLJ(L UNITY
.i.

s

T\L: 1(i .:E VERY ShALL. IT IS POSSTT:L[: TO PROJc

VECTOR UF RUST -HF:

zrRo, (

SP')AkHS CO

TI,V,

'JILL i.r

,'TA I IONS.

ALI_ O,
LI

(Jt'I00)'

WDIOOS2C

LII I CII EfIU:L HR NEARLY EflWL

, INI U' TO THE UFi • H L' LLi

C

C

Wtioo5c•

IF A EHN 5 C5TcI VAL LIE 01 '1, tO IS I.JSEII , u;!rEr: TI
r 11
t'I Ct II
I R'k 1UF RI U '0 1 Tlh TUR
JILL II•;VL 9., I•L1L.LI!1 ,J',':.-1r(: rr:IcsirY

WDI005C
A

UEI00

WttI 00/(
WBIOOS;'c
U DI 0(15 U
U T.

1005

U I 100 tIC
WEf I ooo:;

e

— 211

C *****ALGORIThM NOTES
C
C

OVERFLOWS.

*****REFERENCES:
(1)
BEATON.A.E. AND TUKEYpJ.W4(1974), TECHNOMETRICS 16,
147—192.

CC
CS
CC
CS

ROSEPACK RELEASE 0.4
IF (IBM) THEN
IBM 360/370 VERSION
ELSE IF (XEROX) THEN
XEROX VERSION
ELSE IF (UNIVAC) THEN
UNIVAC VERSION
ELSE IF (HIS) THEN
HONEYWELL VERSION
ELSE IF (DEC) THEN
POP 10 VERSION
ELSE IF (CDC) THEN
CONTROL DATA VERSION
ELSE IF (BGH) THEN

CC

BURROUGI iS VERSION

CC

CS
CC
CS

CC
CS

.

MARCH 1977
.

CC

S

C
C
C
C
C

C

.

C

C
CS
CC
CS

148100690
148100700
148100710
148100720

148100730
148100740
148100769

148100770
148100780
148100799
148100800
148100810
148100820
148100930
140100040

1481008W
148100960
148100070

unooSao

****t***tS

148100390
148100900
148100910

SINGLE PRECISION DECK
DOUBLE PRECISION DECK

148100920
.

*$*CtGEHERALS
QUESTIONS AND COMMENTS SHOuLD BE DIRECTED TO:
ROSEPACK STAFF MANAGER
COMPUTER RESEARCH CENTER FOR ECONOMICS AND HANAGEMENT SCIENCE
NATIONAL BUREAU OF ECUNUMIC RESEARCH
575 TECHNOLOGY SQUARE
CAMBRIDGE, MASS. 02139.

C
C
C
C
C
C
C
C
C
C

148100630
118100640
148100650
148100660
148100670
wexooaeo

148100750

********$* MACHINE VERSION
IF (SINGLE) 1 CARD, 1 CARD

C
C

.

.

ELSE, 1 CARD
CS
CC

s

***$*HI STORY S

CS
CC
CS

CC

.

THE INPUT PARAMETERS ARE CHECKED TO AVOID UNDERFLOWS AND

C
C

C
C
C
C
C

—.

RESEARCH AND DESIGN OF THIS PROGRAM SUPPORTED IN PART BY
NATIOUAL SCIENCE FOUNDATION GRANT GJ—1154X3 AND
NATIONAL SCIENCE FOUNDATION GRANT DCR75—08802
TO NATIONAL DUZAU OF ECc'Nfl;f XC RESEARCH, INC.

148100930
148100940
148100950
148100960

11D100970
148100980

wnoocto
WBTOIC'OO
148101010
148101020

80101030
140101040
148101050

W8I01060
140101070

::::::::::n ::::::::::::::t::::s ::::::: t::::::::::s:s::::: $ttl ::::lmIo.Locq

WBI0fl00
88101110
:::::::::: OFLXH IS THE LARGEST POSITIVE FLOATING POINT NUflBEk
iF (1DHL) THEN
IBM 360/37(fl 011.111 —

(16.5t63)E(1. — 16.t*—6) :::fl:zu:

WDIOI 124
148101130
WBIC't140

ELSE IF (18142) THEN
1DM 370/360: OFLIII

14010.1150
IJDI01.L70

CS

ELSE IF CXE1OX)
XEROX: OFLXM
ELSE IF CUNIVtC) thEN

CC
CS

ELSE IF (HIS) THCN

CC
CS
CC

CC
CS
CC
CS

CC
CS
CC

a C1/.**63)*(1, — 16.**—14) ::t:zm::
THEN
= (16.t*63)tCi. — 16.*t—6) :unu:::

(INIVACI OFLI!, a
HOUCYIJELL:

(2.*t127)*C1.

2.*t—27)

::::::::::

OFLIM (2.tt227tU. — 2.**—27) UflU flu

ELSE iF (DCC) THCN
POP 101 On.IH —
ELSE IF (CDC) THEN

(2.**127)*(1.

CUNTflOL nnm; nrLxii
ELSE IF (7;GH) TibtN

kumwucius:

—

— 2.**—27)

:1:1::::::

2.fl1922)*(2.fl40 — 1.) :u:s::u:

WLIH = (8.**63)*(8.t*11 — 1.)

:::uu:::

8810L160
88101180
88101190
140101200

WDI0210
140101220
148I0}230
148101240
110101250

88101260
WDIOJ 270

88101200

— 25 —

Cs
CC
CS

ELSE, 1 CARD

WD10129C
WBIOI3OC
WB10131C
W810132C

********** DATA STATEMENT **********
DATA OFLIM /SINFP/
DATA OFLIM /Z7FFFFFFFFFFFFFFF/

C
C

WB 10

:::::::::: UFETA IS THE SMALLEST POSITIVE FLOATING POINT NUiiBEF
S.T. UFETA AND -UFETA CAN BOTH BE REPRESENTED.
IF (IBM) ThEN
IBM 360/370: UFETA = 16.*—6 ::u:::u:
ELSE IF (XEFWX) THEN
UIUA
r.r 4
IrrrA
J 444444444+
A
4 ur
E I Fl --IL
JO, .t'UJ
4 ••4444444

C

Cs

CC
CS

L
LL

ElSE IF (UNIVAC) THEN

C

:

: :1::::

WBIOI4/rC

2,*—129

ELSE IF (BGH) THEN

cc

= o.*x<--i

riuRr.ouc3Hs: (JFETA

Cs
CC

ELSE, 1 CAD

Cs

rIATA 11FET( /SETA/

W B 1014 0

: : : : : : : : : :

CON1OL DATA UFETA = 2,i*—973

Cs

:::

WDT010
::::::::::

UB 101.470

WBI01CC.

: : ::::

WBIO149Ct

WBI011.'
WDI01;.j
WDXO.1

C
C
1

•

01:0) PROD

IF (CO(T .01, 1.Ot'O) FFOD
C

Li B I 01 :;:

OFLTH * CONET
UFETA >< CONST

Wi )T

C

WB 101 c 0::
WD101(
wr 1016

t'Ars( UC1)

IF (Ui •LE. COSI) GO TO [0
r-I r'rI—r 4144441441
r,r4—.Ifr
•+444*4*4I
U .1. ) / • U
••4444•4••

i

•

S0t4(I) = 0.0130
GO

IC)

100

WI) 016:
UB 10 :.

Coi11i:UUE

,c

IF (COST •LiT. 1.0130) GO TO 20
IF

U L' ro.; 7

(UJ •LE. ,Irr.ev..
PROL) ( i'p't
IC) 20

•1
+44,4,444+ L1J4L,Li. IUUL?.' LJ\I.I'.LL,:

C

SQW(I)

0.0130

WlI01Y'

•44,4tt•tt

1)

CONTINUE
IF (CONST +L4I 1.0130) GO TO 30
IF (Ui •GE, PROD) (30 TO 30

C

: : : : : : : : : DIVISIc

500(I)
GO

30

(t 10177

WOULD UN::RrLc'j

1.0130

:::::::
Wb 10

TO 100

CONTINUE

:::::::::
Ui
U(T)

c

SGU(1)

100 C0TIN:

FUNCTION CAN 1;L CONPuIEI: NURJ1AU_y

/ CO1
((0,.,t:

••

Ui)

•-

O4Lo)

': ((O.:.,I:io

:::::t:
[Nb

R;

T=0I0c/o(6o

:::

— Ui) + 0.130>

i.

t21 72

wioi;

I)0
w;Ioi .i

-

1!I'D1 r;:)

C
lETUf:ii

:ro

l)R:. Of.

Go rn ioo

20

c

01 ;•,•

WD
013 101

DC 100 IN
Ui

¶9

WJI0 Itt

OF FFOGRA11

ir (COOST , LE •

0

[48101

DATA SIATEHENr :***

DATA UrLTA /Z0010000000000000/

C **.iODY

Wti101320

UIZU14Ci

ELSE IF (DEC) TH.:N

Pup 10: UFETA
ELSE IF (CDC) THEN

UB 1013? C)

14 DI 01

HONEYWLLL UFE1A = (2.**—126)

CC
CS
cc
Cs
CC

WD 101 3 C

WB 10141 'D

(UTS) THEN

ELSE It

WB 101 3

WBIO14Ot)

UNIVAC: UFETA = 2.**—129 :::::

CC

WB1013(

::::ti.::

— 26

—

Acc-iowlednents

The authors are grateful to many people for their assistance in
doing this work. Especially we thank Jol'n Dennis, Gene G3lub, and

Roy Welsch for their helpful suggestions. Da.vid Hoaglin and Stan Wassern

provided the software for the stem-and-leaf display which gives a useful

sury of computational results. Richard Bartels made available the
software for the
start. Alan Cline, Cleve Moler, G. W. Stewart, and
J. H. Wilkinson shared with us their technique for estimating the
condition number of a matrix. David Gay, with valuable advice from
David Hoaglin. on random number generators, wrote th code for the condition
estimate.
Michael Sutherland and Richard Becker helped to check the software

on CDC and Honeywell computers, ]uglas Raynor ran several versions of

the code on the PDP 10, T. J, Aird and Ed Battiste supplied the Fortran
converter from D4SL,

Paul Velleman, after using the interactive driver from its own
documentation, made valuable suggestions concerning documentation for use.

Maurice Herlihy and Steve Peters independently used the software, checked

parts of the program and documentation for use. Sandra Mori.rty has provided
technical assistance throughout the period in which this work was done.

— 27 —

References

1.

Aird,

2.

Bartels,

T. J., "The Fortran Converter User's Guide," IMSL,
R.,

Problems,"

and

Johns

Conn,

A., "Linearly

Hopkins University,

1975k

Constrained Discrete
Technical

Report

#248,

June 1976.

3. Clime, A., 1bler, C., Stewart,
"On

G.

W., and

Wilkinson,

J.

H.,

an Estñate for the Condition Number of a M3±rix," inforrr.].

nnuscript, 1977.

4.

Dennis, J., private conlrruinica-tion, June 1976.

5. Draper, N, R., arid Smith, H., Applied Regression Analysis,
John Wiley arid Sons, Inc., 1966.
6.

Draper, N. R., and Stoneman, D., "Residuals and Their Variance
Patterns," Technometrics, 8, 1966, p. 695—699.

7. Garbow, B.
Matrix

Boyle, J. M., DDngarra, J.

Eigensystem

Lecture

8. Golub,

S.,.

Routines

J., and Moler,

- EISPACI< Guide Ectension, Springer-Verlag,

Notes in Computer Science,

51, 1977.

G., Kiema, V., and Stewart, G. W., "Rank

Squares

Problems," University

University,

C. B.,

STAN-C5-7 6—559,

of Maryland,

Degeneracy and

1976, Stanford

TR-456,

1976, National Bureau

Least

of Economic

Research, Inc., Working Paper 165, 1977.

9. Hoaglin, D. C., and Wasserriri, S., "Autonting Stem—and-Leaf Displays,"
National Bureau of Economic Research, Inc., Working Paper 109, 1975.

10. Hoaglin, D. C., and Welsch, R. E., "The Hat Matrix in Regression

and ANOVA," Harvard University, Deparnent of Statistics, Men. NS 341,
December 1976.

— 28

11.

Holland, P., and

—

Welsch, R., "Robust Reession Using Iteratively

Reweighted Least Squares," Communications in Statistics: Theory

arid
12.

Methods, 1977.

Ka.den, N., and Kiema, V., "Guidelines for Writing Semi-portable

Fortran," National Bureau of
Paper 130,

Working

1976.

13. Lawson, C. L., and
Prentice-Hall,

ill..

Economic Research, Inc.,

Hanson, R. J., Solving Least Squares

Problems,

Inc., 1971.1..

Ryder; B. G., The Fortran Verifier: User's Guide, Computing
Science Tech. Report 12, Bell Telephone Labs., 1975.

15.

Tukey, J. W., Exploratory ta

Analysis, Addison-Wesley, 1977.

16. Van Der Sluis, A., "Condition, Equilibration and Pivoting in
Linear

Algebraic Systems," Number.

Math. 15

(1970).

&'rata Sheet to Working Paper #189.

Table of Contents: replace lines 2, 3, and 4 with
Section 1, Iteratively Reweighted Least Squares . . . 3
Section 2, Selecting the Rank of the Data Matrix. . . 6
Section 3, Some Numerical Results .
8
page

1,

para'aph 2, line 5: replace

Introduction:

"Optionally"

with

"Displaying".

paraaph 2, line 6, 7: replace "can be displayed" with
"is

an option".

paraph 3, line 1:
thenumber. . . ."

"The usual

statistical

paraaph 3, line 4: Insert a dash
and

page 2,

(-)

"is".

information -

between "weight"

pare'aph 2, line 3: replace "Rather" with "For such
information".

paraaph 2, line 4: !?and the references therein".
para'aph 3, line 3: renove the hyphen.
page 3,

insert subheading: "Iteratively Reweighted Least Squares"

line 2: "...years. It is..."
page

4,

equation 'si-oud read

line 5 from top:

=

w+1l/2A+(w'2b

Line4frcmbot-tom: addasubscript

Shouldread:

2, to

II'112•

Insert after last line: "The function that is

minimized

being
determines the formfl.a for the weight function

used. In general,
weight
page 5,

we

nu.niize

m
E

p(r.1 (x)/s) so that

function is given by a W(u)

the

p' (u).

line 2: Tuning Constant" (should have elava-ted asterisk).

line

6 from top:

function is 11(1+

u/Ff).

—2—

page 5,

insert as footnote;
These are default values for the tuning constants
which are desied to have 95% asymptotic efficiency
with respect to ordinary least squares when the
distrubances frcrn the nonnal or Gaussian distribution
and a scaling fmction converge to the standard
deviation of that disturbance distribution.
insert subheading: "Selecting the Pank of the ta Matrix"
•
•

page 6,

para'aph 2, line 6: insert a corrma after "occur".
page 8,

insert subheading: "Some Numrical Results"

page 28,

reference !4: replace "private corrffrrunication, June 1976"

with "Non-linear Least Squares and Equations," The State

of the Art in Numerici Analysis, Academic Press, 1977.

